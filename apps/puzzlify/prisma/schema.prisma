// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  password         String
  hostedAdventures Adventure[]      @relation("HostAdventures")
  teams            Team[]
  teamAssignments  TeamAssignment[]
}

model Team {
  id                   String           @id @default(uuid())
  name                 String
  users                User[]
  adventures           Adventure[]      @relation("TeamAdventures")
  teamProgresses       TeamProgress[]
  adventureAssignments TeamAssignment[]
}

model Adventure {
  id              String           @id @default(uuid())
  dateCreated     DateTime         @default(now())
  name            String
  startDate       DateTime
  stages          Stage[]          @relation("AdventureStages")
  stageRelations  StageRelation[]  @relation("AdventureStageRelations")
  hostId          String
  host            User             @relation("HostAdventures", fields: [hostId], references: [id])
  teams           Team[]           @relation("TeamAdventures")
  stageProgresses TeamProgress[]
  teamAssignments TeamAssignment[]
}

model Stage {
  id              String          @id @default(uuid())
  label           String
  riddle          String?
  answer          String?
  status          String          @default("draft")
  hints           Hint[]          @relation("StageHints")
  adventureId     String
  adventure       Adventure       @relation("AdventureStages", fields: [adventureId], references: [id])
  stageProgresses TeamProgress[]
  previousStages  StageRelation[] @relation("PreviousStages")
  nextStages      StageRelation[] @relation("NextStages")
}

model StageRelation {
  id          String    @id @default(uuid())
  adventureId String
  adventure   Adventure @relation("AdventureStageRelations", fields: [adventureId], references: [id])
  fromStageId String
  fromStage   Stage     @relation("NextStages", fields: [fromStageId], references: [id])
  toStageId   String
  toStage     Stage     @relation("PreviousStages", fields: [toStageId], references: [id])

  @@unique([fromStageId, toStageId])
}

model Hint {
  id      String @id @default(uuid())
  delay   Int
  hint    String
  stageId String
  stage   Stage  @relation("StageHints", fields: [stageId], references: [id])
}

model TeamProgress {
  id             String    @id @default(uuid())
  teamId         String
  adventureId    String
  stageId        String
  startTime      DateTime  @default(now())
  completionTime DateTime?

  team      Team      @relation(fields: [teamId], references: [id])
  adventure Adventure @relation(fields: [adventureId], references: [id])
  stage     Stage     @relation(fields: [stageId], references: [id])

  @@unique(name: "teamProgressId", [teamId, adventureId, stageId])
}

model TeamAssignment {
  id          String @id @default(uuid())
  userId      String
  adventureId String
  teamId      String

  user      User      @relation(fields: [userId], references: [id])
  adventure Adventure @relation(fields: [adventureId], references: [id])
  team      Team      @relation(fields: [teamId], references: [id])

  @@unique([userId, adventureId])
}
