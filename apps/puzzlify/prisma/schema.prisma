// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

enum TierId {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

model Tier {
  id           TierId      @id
  name         String
  maxTeamCount Int
  adventures   Adventure[]
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String
  hostedAdventures Adventure[]     @relation("HostAdventures")
  teams            TeamUser[]
  adventures       UserAdventure[]
}

model Team {
  id         String          @id @default(uuid())
  name       String
  adventures TeamAdventure[]
  progresses TeamProgress[]
  users      TeamUser[]
}

model Adventure {
  id               String          @id @default(uuid())
  dateCreated      DateTime        @default(now())
  name             String
  startDate        DateTime
  published        Boolean         @default(false)
  steps            Step[]          @relation("AdventureSteps")
  puzzles          Puzzle[]        
  tier             Tier            @relation(fields: [tierId], references: [id])
  tierId           TierId          @default(FREE)
  hostId           String
  host             User            @relation("HostAdventures", fields: [hostId], references: [id])
  teams            TeamAdventure[]
  users            UserAdventure[]
  puzzleProgresses TeamProgress[]
}

model Step {
  id               String         @id @default(uuid())
  label            String
  order            Int
  adventureId      String
  adventure        Adventure      @relation("AdventureSteps", fields: [adventureId], references: [id])
  tracks           Track[]        @relation("StepTracks")
}

model Track {
  id               String         @id @default(uuid())
  label            String
  order            Int
  stepId           String
  step             Step           @relation("StepTracks", fields: [stepId], references: [id])
  puzzles          Puzzle[]       @relation("TrackPuzzles")
}

model Puzzle {
  id               String         @id @default(uuid())
  label            String
  riddle           String?
  answer           String?
  status           String         @default("draft")
  adventureId      String
  adventure        Adventure      @relation(fields: [adventureId], references: [id])
  trackId          String?
  track            Track?          @relation("TrackPuzzles", fields: [trackId], references: [id])
  order            Int?
  assets           Asset[]
  hints            Hint[]         @relation("PuzzleHints")
  puzzleProgresses TeamProgress[]
}

model Asset {
  id          String   @id
  url         String
  puzzleId    String
  puzzle      Puzzle   @relation(fields: [puzzleId], references: [id])
  dateCreated DateTime @default(now())
}

model Hint {
  id       String @id @default(uuid())
  delay    Int
  hint     String
  puzzleId String
  puzzle   Puzzle @relation("PuzzleHints", fields: [puzzleId], references: [id])
}

model TeamProgress {
  id             String    @id @default(uuid())
  teamId         String
  adventureId    String
  puzzleId       String
  startTime      DateTime  @default(now())
  completionTime DateTime?

  team      Team      @relation(fields: [teamId], references: [id])
  adventure Adventure @relation(fields: [adventureId], references: [id])
  puzzle    Puzzle    @relation(fields: [puzzleId], references: [id])

  @@unique(name: "teamProgressId", [teamId, adventureId, puzzleId])
}

model TeamUser {
  id     String @id @default(uuid())
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([teamId, userId]) // Ensure a user can only be part of a team once
}

model TeamAdventure {
  id     String @id @default(uuid())
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  adventure   Adventure @relation(fields: [adventureId], references: [id])
  adventureId String

  createdAt  DateTime @default(now())
  waitlisted Boolean  @default(false)

  @@unique([teamId, adventureId]) // Ensure a team can only join an adventure once
}

model UserAdventure {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  adventureId String

  @@unique([userId, adventureId]) // Ensure a user cannot join multiple teams in the same adventure
}
