// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

enum TierId {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

model Tier {
  id           TierId      @id
  name         String
  maxTeamCount Int
  adventures   Adventure[]
}

model User {
  id               String          @id @default(uuid())
  email            String          @unique
  password         String
  hostedAdventures Adventure[]     @relation("HostAdventures")
  teams            TeamUser[]
  adventures       UserAdventure[]
}

model Team {
  id         String          @id @default(uuid())
  name       String
  adventures TeamAdventure[]
  progresses TeamProgress[]
  users      TeamUser[]
}

model Adventure {
  id              String          @id @default(uuid())
  dateCreated     DateTime        @default(now())
  name            String
  startDate       DateTime
  stages          Stage[]         @relation("AdventureStages")
  stageRelations  StageRelation[] @relation("AdventureStageRelations")
  tier            Tier            @relation(fields: [tierId], references: [id])
  tierId          TierId          @default(FREE)
  hostId          String
  host            User            @relation("HostAdventures", fields: [hostId], references: [id])
  teams           TeamAdventure[]
  users           UserAdventure[]
  stageProgresses TeamProgress[]
}

model Stage {
  id              String          @id @default(uuid())
  label           String
  riddle          String?
  answer          String?
  status          String          @default("draft")
  assets          Asset[]
  hints           Hint[]          @relation("StageHints")
  adventureId     String
  adventure       Adventure       @relation("AdventureStages", fields: [adventureId], references: [id])
  stageProgresses TeamProgress[]
  previousStages  StageRelation[] @relation("PreviousStages")
  nextStages      StageRelation[] @relation("NextStages")
}

model Asset {
  id          String   @id
  url         String
  stageId     String
  stage       Stage    @relation(fields: [stageId], references: [id])
  dateCreated DateTime @default(now())
}

model StageRelation {
  id          String    @id @default(uuid())
  adventureId String
  adventure   Adventure @relation("AdventureStageRelations", fields: [adventureId], references: [id])
  fromStageId String
  fromStage   Stage     @relation("NextStages", fields: [fromStageId], references: [id])
  toStageId   String
  toStage     Stage     @relation("PreviousStages", fields: [toStageId], references: [id])

  @@unique([fromStageId, toStageId])
}

model Hint {
  id      String @id @default(uuid())
  delay   Int
  hint    String
  stageId String
  stage   Stage  @relation("StageHints", fields: [stageId], references: [id])
}

model TeamProgress {
  id             String    @id @default(uuid())
  teamId         String
  adventureId    String
  stageId        String
  startTime      DateTime  @default(now())
  completionTime DateTime?

  team      Team      @relation(fields: [teamId], references: [id])
  adventure Adventure @relation(fields: [adventureId], references: [id])
  stage     Stage     @relation(fields: [stageId], references: [id])

  @@unique(name: "teamProgressId", [teamId, adventureId, stageId])
}

model TeamUser {
  id     String @id @default(uuid())
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([teamId, userId]) // Ensure a user can only be part of a team once
}

model TeamAdventure {
  id          String    @id @default(uuid())
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String

  adventure   Adventure @relation(fields: [adventureId], references: [id])
  adventureId String

  createdAt   DateTime  @default(now())
  waitlisted  Boolean   @default(false)

  @@unique([teamId, adventureId]) // Ensure a team can only join an adventure once
}

model UserAdventure {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  adventure   Adventure @relation(fields: [adventureId], references: [id])
  adventureId String

  @@unique([userId, adventureId]) // Ensure a user cannot join multiple teams in the same adventure
}
